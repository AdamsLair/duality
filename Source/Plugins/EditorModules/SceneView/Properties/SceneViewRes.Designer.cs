//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duality.Editor.Plugins.SceneView.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class SceneViewRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SceneViewRes() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Duality.Editor.Plugins.SceneView.Properties.SceneViewRes", typeof(SceneViewRes).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconEyeCross {
            get {
                object obj = ResourceManager.GetObject("IconEyeCross", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconLock {
            get {
                object obj = ResourceManager.GetObject("IconLock", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Icon ähnlich wie (Symbol).
        /// </summary>
        public static System.Drawing.Icon IconSceneView {
            get {
                object obj = ResourceManager.GetObject("IconSceneView", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t remove {0} because it is required by the &apos;{1}&apos; Component. ähnelt.
        /// </summary>
        public static string MenuItemDesc_CantRemoveComponent {
            get {
                return ResourceManager.GetString("MenuItemDesc_CantRemoveComponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove ähnelt.
        /// </summary>
        public static string MenuItemName_RemoveComponent {
            get {
                return ResourceManager.GetString("MenuItemName_RemoveComponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reset ähnelt.
        /// </summary>
        public static string MenuItemName_ResetComponent {
            get {
                return ResourceManager.GetString("MenuItemName_ResetComponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scene View ähnelt.
        /// </summary>
        public static string MenuItemName_SceneView {
            get {
                return ResourceManager.GetString("MenuItemName_SceneView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap OverlayLink {
            get {
                object obj = ResourceManager.GetObject("OverlayLink", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap OverlayLinkBroken {
            get {
                object obj = ResourceManager.GetObject("OverlayLinkBroken", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scene ähnelt.
        /// </summary>
        public static string SceneNameLabel {
            get {
                return ResourceManager.GetString("SceneNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unsaved Scene ähnelt.
        /// </summary>
        public static string SceneNameNotYetSaved {
            get {
                return ResourceManager.GetString("SceneNameNotYetSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Clone ähnelt.
        /// </summary>
        public static string SceneView_ContextItemName_Clone {
            get {
                return ResourceManager.GetString("SceneView_ContextItemName_Clone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Delete ähnelt.
        /// </summary>
        public static string SceneView_ContextItemName_Delete {
            get {
                return ResourceManager.GetString("SceneView_ContextItemName_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Lock / Hide ähnelt.
        /// </summary>
        public static string SceneView_ContextItemName_LockHide {
            get {
                return ResourceManager.GetString("SceneView_ContextItemName_LockHide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New ähnelt.
        /// </summary>
        public static string SceneView_ContextItemName_New {
            get {
                return ResourceManager.GetString("SceneView_ContextItemName_New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rename ähnelt.
        /// </summary>
        public static string SceneView_ContextItemName_Rename {
            get {
                return ResourceManager.GetString("SceneView_ContextItemName_Rename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Doubleclick: {0} ähnelt.
        /// </summary>
        public static string SceneView_Help_Doubleclick {
            get {
                return ResourceManager.GetString("SceneView_Help_Doubleclick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hidden ähnelt.
        /// </summary>
        public static string SceneView_Item_Hidden {
            get {
                return ResourceManager.GetString("SceneView_Item_Hidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The object is currently locked and hidden. Click to show and unlock. ähnelt.
        /// </summary>
        public static string SceneView_Item_Hidden_Tooltip {
            get {
                return ResourceManager.GetString("SceneView_Item_Hidden_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Locked ähnelt.
        /// </summary>
        public static string SceneView_Item_Locked {
            get {
                return ResourceManager.GetString("SceneView_Item_Locked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The object is currently locked. Click to hide or unlock. ähnelt.
        /// </summary>
        public static string SceneView_Item_Locked_Tooltip {
            get {
                return ResourceManager.GetString("SceneView_Item_Locked_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Lock / Hide ähnelt.
        /// </summary>
        public static string SceneView_Item_LockHide {
            get {
                return ResourceManager.GetString("SceneView_Item_LockHide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Click to lock or hide the object while editing. ähnelt.
        /// </summary>
        public static string SceneView_Item_LockHide_Tooltip {
            get {
                return ResourceManager.GetString("SceneView_Item_LockHide_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Linked to: {0} ähnelt.
        /// </summary>
        public static string SceneView_PrefabLink {
            get {
                return ResourceManager.GetString("SceneView_PrefabLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Delete {0} Objects ähnelt.
        /// </summary>
        public static string UndoRedo_DeleteObjects {
            get {
                return ResourceManager.GetString("UndoRedo_DeleteObjects", resourceCulture);
            }
        }
    }
}
