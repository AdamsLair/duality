//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duality.Editor.Plugins.PackageManagerFrontend.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class PackageManagerFrontendRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal PackageManagerFrontendRes() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Duality.Editor.Plugins.PackageManagerFrontend.Properties.PackageManagerFrontendRe" +
                            "s", typeof(PackageManagerFrontendRes).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download example projects to see Duality in action..
        /// </summary>
        public static string ActionDesc_BrowseSamplePackages {
            get {
                return ResourceManager.GetString("ActionDesc_BrowseSamplePackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse Sample Packages.
        /// </summary>
        public static string ActionName_BrowseSamplePackages {
            get {
                return ResourceManager.GetString("ActionName_BrowseSamplePackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconCore {
            get {
                object obj = ResourceManager.GetObject("IconCore", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconEditor {
            get {
                object obj = ResourceManager.GetObject("IconEditor", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconIncompatibleInstall {
            get {
                object obj = ResourceManager.GetObject("IconIncompatibleInstall", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconIncompatibleUpdate {
            get {
                object obj = ResourceManager.GetObject("IconIncompatibleUpdate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconLikelySafeUpdate {
            get {
                object obj = ResourceManager.GetObject("IconLikelySafeUpdate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconLikelyUnsafeInstall {
            get {
                object obj = ResourceManager.GetObject("IconLikelyUnsafeInstall", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconLikelyUnsafeUpdate {
            get {
                object obj = ResourceManager.GetObject("IconLikelyUnsafeUpdate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon IconPackage {
            get {
                object obj = ResourceManager.GetObject("IconPackage", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconPackageMedium {
            get {
                object obj = ResourceManager.GetObject("IconPackageMedium", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconSafeUpdate {
            get {
                object obj = ResourceManager.GetObject("IconSafeUpdate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconSample {
            get {
                object obj = ResourceManager.GetObject("IconSample", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconSampleBig {
            get {
                object obj = ResourceManager.GetObject("IconSampleBig", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap IconUpToDate {
            get {
                object obj = ResourceManager.GetObject("IconUpToDate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed Packages.
        /// </summary>
        public static string ItemName_InstalledPackages {
            get {
                return ResourceManager.GetString("ItemName_InstalledPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Online Repository.
        /// </summary>
        public static string ItemName_OnlineRepository {
            get {
                return ResourceManager.GetString("ItemName_OnlineRepository", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View on {0}.
        /// </summary>
        public static string ItemName_VisitLinkUrl {
            get {
                return ResourceManager.GetString("ItemName_VisitLinkUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse Samples....
        /// </summary>
        public static string MenuItemName_BrowseSamples {
            get {
                return ResourceManager.GetString("MenuItemName_BrowseSamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manage Packages....
        /// </summary>
        public static string MenuItemName_PackageView {
            get {
                return ResourceManager.GetString("MenuItemName_PackageView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package Compatibility.
        /// </summary>
        public static string MsgConfirmIncompatibleOperation_Caption {
            get {
                return ResourceManager.GetString("MsgConfirmIncompatibleOperation_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a major version difference between some of the new target packages and local package versions. Compatibility cannot be guaranteed. Continue anyway?.
        /// </summary>
        public static string MsgConfirmIncompatibleOperation_Desc {
            get {
                return ResourceManager.GetString("MsgConfirmIncompatibleOperation_Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No description available.
        /// </summary>
        public static string NoDescAvailable {
            get {
                return ResourceManager.GetString("NoDescAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Package selected.
        /// </summary>
        public static string NoPackageSelected {
            get {
                return ResourceManager.GetString("NoPackageSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing Packages....
        /// </summary>
        public static string TaskInstallPackages_Caption {
            get {
                return ResourceManager.GetString("TaskInstallPackages_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duality is installing packages. This may include downloading them from the central package repository..
        /// </summary>
        public static string TaskInstallPackages_Desc {
            get {
                return ResourceManager.GetString("TaskInstallPackages_Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstalling Packages....
        /// </summary>
        public static string TaskUninstallPackages_Caption {
            get {
                return ResourceManager.GetString("TaskUninstallPackages_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duality is uninstalling packages..
        /// </summary>
        public static string TaskUninstallPackages_Desc {
            get {
                return ResourceManager.GetString("TaskUninstallPackages_Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating Packages....
        /// </summary>
        public static string TaskUpdatePackages_Caption {
            get {
                return ResourceManager.GetString("TaskUpdatePackages_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duality is updating packages. This may include downloading new versions from the central package repository..
        /// </summary>
        public static string TaskUpdatePackages_Desc {
            get {
                return ResourceManager.GetString("TaskUpdatePackages_Desc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This package is not supported by your Duality installation..
        /// </summary>
        public static string TooltipInstallNoCompatibility {
            get {
                return ResourceManager.GetString("TooltipInstallNoCompatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This package is likely incompatible with other packages in your project..
        /// </summary>
        public static string TooltipInstallUnlikelyCompatibility {
            get {
                return ResourceManager.GetString("TooltipInstallUnlikelyCompatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating this package shouldn&apos;t cause any compatibility issues..
        /// </summary>
        public static string TooltipUpdateDefiniteCompatibility {
            get {
                return ResourceManager.GetString("TooltipUpdateDefiniteCompatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating this package is usually fine, but certain older plugins may not be compatible with the new version..
        /// </summary>
        public static string TooltipUpdateLikelyCompatibility {
            get {
                return ResourceManager.GetString("TooltipUpdateLikelyCompatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating this package will likely break older plugins depending on it..
        /// </summary>
        public static string TooltipUpdateNoCompatibility {
            get {
                return ResourceManager.GetString("TooltipUpdateNoCompatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating this package can cause compatibility problems with older plugins..
        /// </summary>
        public static string TooltipUpdateUnlikelyCompatibility {
            get {
                return ResourceManager.GetString("TooltipUpdateUnlikelyCompatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This package is up-to-date..
        /// </summary>
        public static string TooltipUpdateUpToDate {
            get {
                return ResourceManager.GetString("TooltipUpdateUpToDate", resourceCulture);
            }
        }
    }
}
