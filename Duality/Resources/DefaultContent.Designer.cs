//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duality.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DefaultContent {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DefaultContent() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Duality.Resources.DefaultContent", typeof(DefaultContent).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Beep {
            get {
                object obj = ResourceManager.GetObject("Beep", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Checkerboard {
            get {
                object obj = ResourceManager.GetObject("Checkerboard", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap DualityIcon {
            get {
                object obj = ResourceManager.GetObject("DualityIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap DualityIconB {
            get {
                object obj = ResourceManager.GetObject("DualityIconB", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap DualityLogoBig {
            get {
                object obj = ResourceManager.GetObject("DualityLogoBig", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap DualityLogoMedium {
            get {
                object obj = ResourceManager.GetObject("DualityLogoMedium", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap DualityLogoSmall {
            get {
                object obj = ResourceManager.GetObject("DualityLogoSmall", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D mainTex;
        ///
        ///void main()
        ///{
        ///	gl_FragColor = gl_Color * texture2D(mainTex, gl_TexCoord[0].st);
        ///}.
        /// </summary>
        internal static string MinimalFrag {
            get {
                return ResourceManager.GetString("MinimalFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to void main()
        ///{
        ///	gl_Position = ftransform();
        ///	gl_TexCoord[0] = gl_MultiTexCoord0;
        ///	gl_FrontColor = gl_Color;
        ///}.
        /// </summary>
        internal static string MinimalVert {
            get {
                return ResourceManager.GetString("MinimalVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D mainTex;
        ///
        ///void main()
        ///{
        ///	gl_FragColor = vec4(gl_Color.rgb, step(0.5, texture2D(mainTex, gl_TexCoord[0].st).a));
        ///}.
        /// </summary>
        internal static string PickingFrag {
            get {
                return ResourceManager.GetString("PickingFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D mainTex;
        ///uniform float smoothness;
        ///
        ///const float Gamma = 2.2;
        ///
        ///void main()
        ///{
        ///	// Retrieve base color
        ///	vec4 texClr = texture2D(mainTex, gl_TexCoord[0].st);
        ///	
        ///	// Do some anti-aliazing
        ///	float w = clamp(smoothness * (abs(dFdx(gl_TexCoord[0].s)) + abs(dFdy(gl_TexCoord[0].t))), 0.0, 0.5);
        ///	float a = smoothstep(0.5 - w, 0.5 + w, texClr.a);
        ///
        ///	// Perform Gamma Correction to achieve a linear attenuation
        ///	texClr.a = pow(a, 1.0 / Gamma);
        ///
        ///	// Compose result color
        ///	gl_FragColor = texC [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SharpAlphaFrag {
            get {
                return ResourceManager.GetString("SharpAlphaFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D mainTex;
        ///varying float animBlendVar;
        ///
        ///void main()
        ///{
        ///	// Retrieve frames
        ///	vec4 texClrOld = texture2D(mainTex, gl_TexCoord[0].st);
        ///	vec4 texClrNew = texture2D(mainTex, gl_TexCoord[0].pq);
        ///
        ///	// This code prevents nasty artifacts when blending between differently masked frames
        ///	float accOldNew = (texClrOld.w - texClrNew.w) / (texClrOld.w + texClrNew.w);
        ///	accOldNew *= mix(min(min(animBlendVar, 1.0 - animBlendVar) * 4.0, 1.0), 1.0, abs(accOldNew));
        ///	texClrNew.xyz = mix(texClrNew.xyz, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SmoothAnimFrag {
            get {
                return ResourceManager.GetString("SmoothAnimFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to attribute float animBlend;
        ///varying float animBlendVar;
        ///
        ///void main()
        ///{
        ///	gl_Position = ftransform();
        ///	gl_TexCoord[0] = gl_MultiTexCoord0;
        ///	gl_FrontColor = gl_Color;
        ///	animBlendVar = animBlend;
        ///}.
        /// </summary>
        internal static string SmoothAnimVert {
            get {
                return ResourceManager.GetString("SmoothAnimVert", resourceCulture);
            }
        }
    }
}
